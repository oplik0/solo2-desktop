name: "Release"

on:
  push:
    branches:
      - alpha

jobs:
  create-release:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.semantic-release.outputs.release_id }}
      release_ref: ${{ steps.get-ref.outputs.result }}
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 7
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: pnpm
      - name: install dependencies
        run: pnpm install
      - name: semantic release
        id: semantic-release
        run: pnpm dlx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: get ref
        id: get-ref
        if: ${{ steps.semantic-release.outputs.release_id }}
        uses: actions/github-script@v6
        env:
          release_id: ${{ steps.semantic-release.outputs.release_id }}
        with:
          script: |
            const { data } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
            })
            return data.tag_name

  build-tauri:
    if: "!contains(github.event.head_commit.message, '[skip ci]') && needs.create-release.outputs.release_id"
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ fromJSON(needs.create-release.outputs.release_ref) }}
      - uses: pnpm/action-setup@v2
        with:
          version: 7
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: pnpm
      - name: install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libudev-dev build-essential curl wget libssl-dev libpcsclite-dev
      - name: remove pre-release (windows only)
        if: matrix.platform == 'windows-latest'
        run: (Get-Content ./package.json) -Replace '(\d+\.\d+\.\d+)-alpha\.\d+', '$1' | Set-Content ./package.json
        shell: powershell
      - name: install app dependencies and build it
        run: pnpm install && pnpm build
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ fromJSON(needs.create-release.outputs.release_id) }}
          tauriScript: pnpm tauri

  publish-release:
    if: "!contains(github.event.head_commit.message, '[skip ci]') && needs.create-release.outputs.release_id"
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ fromJSON(needs.create-release.outputs.release_id) }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
